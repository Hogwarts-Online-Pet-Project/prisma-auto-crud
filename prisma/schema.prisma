generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model product {
  id                                                           Int                  @id(map: "pk_product") @default(autoincrement())
  name                                                         String?              @db.VarChar(100)
  copy_of                                                      Int?
  number                                                       String?              @unique(map: "unq_product") @db.VarChar(100)
  selection_using_co2_pattern                                  String?              @db.VarChar(100)
  mass                                                         Float?
  using_co2                                                    Float?
  using_co2_file_url                                           String?              @db.VarChar
  memo                                                         String?              @db.VarChar
  category                                                     String?              @db.VarChar(100)
  purchased                                                    Boolean?
  use_estimate_from_japia                                      Boolean?
  calc_method_for_product_co2                                  String?              @db.VarChar(100)
  purchase_price                                               Decimal?             @db.Money
  classification_id                                            Int?
  product_co2                                                  Float?
  product_co2_file_url                                         String?              @db.VarChar
  copier_id                                                    Int?
  calc_condition                                               calc_condition[]
  process                                                      process[]
  classification                                               classification?      @relation(fields: [classification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_classification")
  product                                                      product?             @relation("productToproduct", fields: [copy_of], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_product")
  other_product                                                product[]            @relation("productToproduct")
  product_subproduct_product_subproduct_product_idToproduct    product_subproduct[] @relation("product_subproduct_product_idToproduct")
  product_subproduct_product_subproduct_subproduct_idToproduct product_subproduct[] @relation("product_subproduct_subproduct_idToproduct")
  product_material                                             product_material[]
}

model calc_condition {
  id                              Int       @id(map: "pk_calc condition") @default(autoincrement())
  idea_calc_condition             String?   @db.VarChar(100)
  internal_calc_condition         DateTime? @db.Date
  process_electric_calc_condition String?   @db.VarChar(100)
  bev_electric_calc_condition     String?   @db.VarChar(100)
  mileage                         Float?
  vehicle_id                      Int?
  product_id                      Int?
  memo                            String?   @db.VarChar
  user_id                         String?
  product                         product?  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_calc condition_product")
  vehicle                         vehicle?  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_calc condition_vehicle")

  @@map("calc condition")
}

model classification {
  id                Int                 @id(map: "pk_classification") @default(autoincrement())
  name              String?             @unique(map: "unq_classification") @db.VarChar(100)
  green_material    Boolean?
  attribute         String?             @db.VarChar(100)
  unit              String?             @db.VarChar(100)
  country           String?             @db.VarChar(100)
  memo              String?
  coefficient       coefficient[]
  generaljis_method generaljis_method[]
  product           product[]
}

model coefficient {
  id                Int             @id(map: "pk_coefficient") @default(autoincrement())
  creation_date     DateTime?       @db.Date
  version           String?         @db.VarChar(100)
  code              String?         @db.VarChar(100)
  name              String?         @db.VarChar(100)
  coefficient       Float?
  memo              String?
  classification_id Int?
  classification    classification? @relation(fields: [classification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_coefficient_classification")

  @@unique([code, classification_id])
  @@unique([creation_date, classification_id], map: "unq_coefficient")
}

model electric_coefficient {
  id                  Int               @id(map: "pk_electric coefficient") @default(autoincrement())
  date                DateTime?         @db.Date
  electric_company_id Int?
  coefficient         Float?
  electric_company    electric_company? @relation(fields: [electric_company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_electric_coefficient_electric_company")
}

model electric_company {
  id                   Int                    @id(map: "pk_electric companies") @default(autoincrement())
  name                 String?                @unique(map: "unq_electric_company") @db.VarChar(100)
  code                 String?                @db.VarChar(100)
  electric_coefficient electric_coefficient[]
  process              process[]
}

model generaljis {
  id                      Int                   @id(map: "pk_generaljis_0") @default(autoincrement())
  name                    String?               @unique(map: "unq_generaljis") @db.VarChar(100)
  japia_classification_id Int?
  major_classification_id Int?
  japia_classification    japia_classification? @relation(fields: [japia_classification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_generaljis_japia_classification")
  major_classification    major_classification? @relation(fields: [major_classification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_generaljis_major_classifications")
  generaljis_method       generaljis_method[]
  material_generaljis     material_generaljis[]
}

model generaljis_method {
  id                Int                @id(map: "pk_generaljis_method") @default(autoincrement())
  generaljis_id     Int?
  method_id         Int?
  classification_id Int?
  classification    classification?    @relation(fields: [classification_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_generaljis_method_classification")
  generaljis        generaljis?        @relation(fields: [generaljis_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_generaljis_method_generaljis")
  method            method?            @relation(fields: [method_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_generaljis_method_method")
  product_material  product_material[]

  @@unique([generaljis_id, method_id], map: "unq_generaljis_method")
}

model japia_classification {
  id                           Int                            @id(map: "pk_japia classifications") @default(autoincrement())
  name                         String?                        @unique(map: "unq_japia_classification") @db.VarChar(100)
  electric_company_id          Int?
  generaljis                   generaljis[]
  japia_classification_process japia_classification_process[]
}

model japia_classification_process {
  id                      Int                   @id(map: "pk_relationship__japia classification vs processes") @default(autoincrement())
  japia_classification_id Int?
  process_id              Int?
  japia_classification    japia_classification? @relation(fields: [japia_classification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_japia_classification_process_japia_classification")
  process                 process?              @relation(fields: [process_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_japia_classification_process_process")

  @@unique([process_id, japia_classification_id])
}

model major_classification {
  id                      Int                   @id(map: "pk_major_classification") @default(autoincrement())
  name                    String?               @unique(map: "unq_major_classification") @db.VarChar(100)
  waste_classification_id Int?
  generaljis              generaljis[]
  waste_classification    waste_classification? @relation(fields: [waste_classification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_major_classification_waste_classification")
}

model material {
  id                  Int                   @id(map: "pk_material") @default(autoincrement())
  code                String?               @unique(map: "unq_material") @db.VarChar(100)
  material_generaljis material_generaljis[]
  product_material    product_material[]
}

model material_generaljis {
  id            Int         @id(map: "pk_material_generaljis_0") @default(autoincrement())
  material_id   Int?
  generaljis_id Int?
  generaljis    generaljis? @relation(fields: [generaljis_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_material_generaljis_generaljis")
  material      material?   @relation(fields: [material_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_material_generaljis_material")
}

model method {
  id                Int                 @id(map: "pk_method_0") @default(autoincrement())
  name              String?             @unique(map: "unq_method") @db.VarChar(100)
  generaljis_method generaljis_method[]
}

model nc_evolutions {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  titleDown   String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  batch       Int?
  checksum    String?   @db.VarChar(255)
  status      Int?
  created     DateTime? @db.Timestamptz(6)
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
}

model process {
  id                           Int                            @id(map: "pk_processes") @default(autoincrement())
  attribute                    String?                        @db.VarChar(100)
  name                         String?                        @db.VarChar(100)
  factory                      String?                        @db.VarChar(100)
  production_line              String?                        @db.VarChar(100)
  electric                     Float?                         @default(0)
  city_gas                     Float?                         @default(0)
  co2_value                    Float?                         @default(0)
  memo                         String?                        @db.VarChar
  product_id                   Int?
  heavy_oil_a                  Float?                         @default(0)
  heavy_oil_c                  Float?                         @default(0)
  kerosene                     Float?                         @default(0)
  light_oil                    Float?                         @default(0)
  gassolin                     Float?                         @default(0)
  ngl                          Float?                         @default(0)
  lpg                          Float?                         @default(0)
  lng                          Float?                         @default(0)
  electric_company_id          Int?
  japia_classification_process japia_classification_process[]
  electric_company             electric_company?              @relation(fields: [electric_company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_process_electric_company")
  product                      product?                       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_process_product")
}

model product_subproduct {
  id                                                Int      @id(map: "pk_product-subproducts") @default(autoincrement())
  product_id                                        Int?
  subproduct_id                                     Int?
  quantity                                          Int?     @default(1)
  product_product_subproduct_product_idToproduct    product? @relation("product_subproduct_product_idToproduct", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product-subproducts_product")
  product_product_subproduct_subproduct_idToproduct product? @relation("product_subproduct_subproduct_idToproduct", fields: [subproduct_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product-subproducts_product_0")

  @@map("product-subproduct")
}

model product_material {
  id                   Int                @id(map: "pk_product_material") @default(autoincrement())
  product_id           Int?
  material_id          Int?
  mass                 Float?
  yield_rate           Float?
  generaljis_method_id Int?
  generaljis_method    generaljis_method? @relation(fields: [generaljis_method_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_material_generaljis_method")
  material             material?          @relation(fields: [material_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_material_material")
  product              product?           @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_material_product")
}

model vehicle {
  category                String?          @db.VarChar(100)
  name                    String?          @db.VarChar(100)
  manufactuer             String?          @db.VarChar(100)
  model                   String?          @db.VarChar(100)
  grade                   String?          @db.VarChar(100)
  drive_system            String?          @db.VarChar(100)
  fule_consumption        Float?
  electricity_consumption Float?
  memo                    String?          @db.VarChar
  release_date            DateTime?        @db.Date
  powertrain              String?          @db.VarChar(100)
  weight                  Float?
  oil_type                String?          @db.VarChar(100)
  id                      Int              @id(map: "pk_vehicle") @default(autoincrement())
  calc_condition          calc_condition[]
}

model waste_classification {
  id                   Int                    @id(map: "pk_waste_classification") @default(autoincrement())
  name                 String?                @unique(map: "unq_waste_classification") @db.VarChar(100)
  unit                 String?                @db.VarChar(100)
  coefficient          Float?
  major_classification major_classification[]
}
